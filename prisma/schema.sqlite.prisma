generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  
  // OAuth integrations data - stored as JSON for flexibility
  googleTokens  String?  // JSON: { accessToken, refreshToken, scope, expiry }
  asanaTokens   String?  // JSON: { accessToken, refreshToken, expiresAt }
  notionTokens  String?  // JSON: { accessToken, botId, workspaceId }
  githubTokens  String?  // JSON: { accessToken, scope, tokenType }

  userSettings  UserSettings?
  timeEntries   TimeEntry[]
  
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Application Models
model Task {
  id                String      @id @default(cuid())
  userId            String      @map("user_id")
  title             String
  description       String?
  status            TaskStatus  @default(PLANNED)
  priority          TaskPriority @default(MEDIUM)
  
  // Planning fields
  plannedDate       DateTime?   @map("planned_date")
  dueDate           DateTime?   @map("due_date")
  estimateMinutes   Int?        @map("estimate_minutes")
  actualMinutes     Int?        @map("actual_minutes")
  
  // Scheduling fields
  scheduledStart    DateTime?   @map("scheduled_start")
  scheduledEnd      DateTime?   @map("scheduled_end")
  
  // Organization
  order             Int         @default(0)
  tags              String?     // JSON array of strings
  
  // External integration data
  source            String?     // 'gmail', 'asana', 'notion', etc.
  sourceId          String?     @map("source_id") // External ID from the source system
  sourceData        String?     @map("source_data") // Additional metadata as JSON
  
  // Timestamps
  createdAt         DateTime    @default(now()) @map("created_at")
  updatedAt         DateTime    @updatedAt @map("updated_at")
  
  // Relations
  user              User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  timeEntries       TimeEntry[]
  calendarEvents    CalendarEvent[]

  @@index([userId, status])
  @@index([userId, plannedDate])
  @@index([sourceId])
  @@map("tasks")
}

model TimeEntry {
  id          String    @id @default(cuid())
  taskId      String    @map("task_id")
  userId      String    @map("user_id")
  startedAt   DateTime  @map("started_at")
  endedAt     DateTime? @map("ended_at")
  minutes     Int?      // Calculated field when endedAt is set
  description String?
  
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, startedAt])
  @@index([taskId])
  @@map("time_entries")
}

model UserSettings {
  id                    String   @id @default(cuid())
  userId                String   @unique @map("user_id")
  timezone              String   @default("UTC")
  workingHoursStart     String   @default("09:00") @map("working_hours_start") // HH:mm format
  workingHoursEnd       String   @default("17:00") @map("working_hours_end")   // HH:mm format
  workingDays           String   @default("1,2,3,4,5") @map("working_days")    // Comma-separated day numbers (1=Mon, 7=Sun)
  defaultEstimateMinutes Int     @default(30) @map("default_estimate_minutes")
  
  // Notification preferences
  enableNotifications   Boolean  @default(true) @map("enable_notifications")
  enableEmailDigests    Boolean  @default(false) @map("enable_email_digests")
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_settings")
}

// Calendar bi-directional sync
model CalendarEvent {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  taskId          String    @map("task_id")
  
  // Calendar provider details
  provider        String    // 'google', 'outlook', etc.
  calendarId      String    @map("calendar_id") // External calendar ID
  eventId         String    @map("event_id")    // External event ID
  
  // Event metadata for sync tracking
  iCalUID         String?   @map("ical_uid")
  etag            String?   // For conflict detection
  sequence        Int?      // Event version number
  
  // Cached event times (for quick queries without API calls)
  start           DateTime
  end             DateTime
  
  // Sync tracking
  lastSyncedAt    DateTime  @default(now()) @map("last_synced_at")
  
  task            Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([taskId])  // One-to-one with Task
  @@unique([provider, calendarId, eventId]) // Unique per calendar system
  @@index([userId, provider, calendarId])
  @@map("calendar_events")
}

// Google Calendar sync state tracking
model GoogleSyncState {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  calendarId    String    @map("calendar_id")
  
  // Watch channel details
  channelId     String    @map("channel_id")
  resourceId    String    @map("resource_id")
  expiration    DateTime  // When the watch expires
  
  // Sync tracking
  syncToken     String?   @map("sync_token")  // For incremental sync
  lastSyncAt    DateTime  @default(now()) @map("last_sync_at")
  
  @@unique([userId, calendarId])
  @@unique([channelId])
  @@index([expiration]) // For renewal queries
  @@map("google_sync_state")
}

enum TaskStatus {
  PLANNED
  SCHEDULED  
  IN_PROGRESS
  BLOCKED
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}